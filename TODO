JavaScript: 
    Variables:
        ☐ var , *let , *const
        ☐ varibale hoisting
        ☐ function hoisting
    Data structures and types:
        ☐ boolean, null, undefined, Number, BigInt, String, *Symbol (new) - Primitives
        ☐ Object 
    Literals:
        ☐ Array, boolean , numeric, float literals
        ☐ Object literals
        ☐ String literals - single & double quotes , *back-tick ` (ES2015 - supports templating)
    Control flow and error handling:
        ☐ block statements
        ☐ Conditional statements 
            ☐ if...else
                ☐ false values ->  false , undefined, null, 0 , NaN, the empty string ("")
            ☐ switch  - breaking same as java
        ☐ Exception handling
            ☐ try...catch...finally (same as in java)
            ☐ throw 
                ☐ any object can be thrown in JavaScript
                ☐ throw `expression`;
    Loops and iteration:
        ☐ for statement 
        ☐ do...while statement
        ☐ while statement
        ☐ labeled statement
        ☐ break & continue
        ☐ for...in statement - iterates a specified variable over obj
        ☐ for...of statement - ierable obj (Array, Map, Set, arguments object etc)
    Functions:
        ☐ function definition vs function expression
            ☐ function expression - annonymous or named ; convenient when passing a function as an argument to another function
            ☐ a function can be defined based on a condition
            ☐ can be `hoisted` (not expressions)
        ☐ recursion, nested
            ☐ variable preservation
            ☐ Multiply-nested functions
            ☐ Name conflicts - inner scopes take precedence
        ☐ Closure
            ☐ the inner function has access to the scope of the outer function
            ☐ variables and functions defined in the outer function will live longer if the inner function manages to survive beyond the life of the outer function
        ☐ arguments object
        ☐ fn parameters
            ☐ default - undefined, can be set a value  (like named params)
            ☐ *rest params (same as varargs in java)
        ☐  *Arrow Functions 
            ☐ always annonymous (think lambdas in java)
            ☐ does not have its own this , arguments, super, or new.target
    Operators:
        ☐ assignment , comparison, arithmatic, bitwise, logical, string, ternary, comma operator, unary, relational
        ☐ unary -> delete , typeof , void 
        ☐ relational -> in , instanceof, 
    Expressions: 
        ☐ any valid unit of code that resolves to a value.
        ☐ arithmetic, string, logical, primary, LHS
        ☐ primary -> this, grouping ()
        ☐ LHS (left hand side) -> new , super, *spread - allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) are expected.

    Numbers and dates: 
    Indexed Collections:
        ☐ Array object & Typed Arrays
    Keyed Collections:
        ☐ Maps & Sets
        ☐ to Arrays from Set
    Objects:
        ☐ objects and properties
        ☐ enumerating properties
        ☐ creating objects
            ☐ object initializers
            ☐ construtor fn
            ☐ Object.create
        ☐ Indexing object properties
        ☐ Defining methods
        ☐ `this` for object reference
        ☐ defining settergs and getters
        ☐ delete property
        ☐ Comparing Objects
            ☐ objects are reference types
            ☐ Only comparing the same object reference with itself yields true. 
    Object Model:
        ☐ Class-based vs. prototype-based languages
        ☐ prototypical object, an object used as a template 
        ☐ any object can be associated as the prototype for another object allowing inheritance
        ☐ defining a class
            ☐ java constructors vs JS constructor functions
            ☐ `JavaScript classes, introduced in ECMAScript 2015, are primarily syntactical sugar over JavaScript's existing prototype-based inheritance. The class syntax does not introduce a new object-oriented inheritance model to JavaScript.`
        ☐ subclass and inheritance
            ☐  Comparison of class-based (Java) and prototype-based (JavaScript) object systems
                    `Category | Class-based (Java) | Prototype-based (JavaScript)`
                    Class vs. Instanced | Class and instance are distinct entities | All objects can inherit from another object.
                    Definitiond | Define a class with a class definition; instantiate a class with constructor methods | Define and create a set of objects with constructor functions.
                    Creation of new object | Create a single object with the new operator | Same.
                    Construction of object hierarchy | Construct an object hierarchy by using class definitions to define subclasses of existing classes.| Construct an object hierarchy by assigning an object as the prototype associated with a constructor function.
                    Inheritance model | Inherit properties by following the class chain.| Inherit properties by following the prototype chain.
                    Extension of properties	 | Class definition specifies all properties of all instances of a class. Cannot add properties dynamically at run time. | Constructor function or prototype specifies an initial set of properties. Can add or remove properties dynamically to individual objects or to the entire set of objects.
            ☐ https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model
            ☐ Inheriting properties
                ☐ object run time peoperties
                ☐ explicitly set up the prototype to ensure dynamic inheritance
                ☐ Local versus inherited values - doing lookup in an object 
                ☐ Determining instance relationships 
                    - __proto__ set when object is constructed; value set to constructors `prototype` property 
                    - new Foo() => __proto__ = Foo.prototype
                    - Every object has a `__proto__` object property (except Object)
                    - Every function has a `prototype` object property
                    - `instanceof` operator tests an object against a function and returns true if the object inherits from the function prototype
                    - eg:  person <|-- employee <|-- engineer
                         - var sherin = new Engineer => 
                                - sherin.__proto__ == Engineer.prototype
                                - sherin.__proto__.proto__ == Employee.prototype          
                                - sherin.__proto__.__proto__ == Person.prototype           
                                - sherin.__proto__.__proto__.__proto__ == Object.prototype           
                                - sherin.__proto__.__proto__.__proto__.__proto__ == null
                                - => TRUE
                ☐ Global information in constructors
                    -  problem with `Foo.prototype = new Bar`; calls the constructor with each inheritance hierarchy and will cause issue if global variables are used in `Bar` constructor
                    - 
                ☐ No multiple inheritance
                    - JavaScript does not support multiple inheritance.
                    -  an object has a single associated prototype, JavaScript cannot dynamically inherit from more than one prototype chain.
                    - `Note:` you can have a constructor function call more than one other constructor function within it. This gives the illusion of multiple inheritance, but any new properties in other objects constructor prototype is not inherited
                    